{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\theod\\\\WebstormProjects\\\\IowaOpenProgKnockout\\\\frontend\\\\src\\\\Views\\\\Components\\\\SinglesBracket.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, Component, useEffect } from \"react\";\nimport { SingleEliminationBracket, DoubleEliminationBracket, Match, MATCH_STATES, SVGViewer } from '@g-loot/react-tournament-brackets';\nimport defaultTheme from \"../Themes/defaultTheme\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateCBracketMatches, updateChampionshipBracketMatches } from \"../../features/singles/singlesSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SinglesBracket({}) {\n  _s();\n  const dispatch = useDispatch();\n  const matchArray = structuredClone(useSelector(state => state.singles.championshipBracketMatches));\n  const cMatchArray = structuredClone(useSelector(state => state.singles.cBracketMatches));\n\n  // const [width, height] = [1920, 1080];\n  // const finalWidth = Math.max(width - 50, 500);\n  // const finalHeight = Math.max(height - 100, 500);\n  const windowSize = useRef([window.innerWidth, window.innerHeight]);\n  const finalWidth = Math.max(windowSize.current[0] - 50, 500);\n  // const finalHeight = Math.max(windowSize.current[1] - 100, 500);\n  const finalHeight = 100000000;\n  const [dispMatchArray, setDispMatchArray] = useState(matchArray);\n  const [doDisp, setDoDisp] = useState(true);\n  // useEffect(() => {\n  //     // console.log(\"HELLO THERE\")\n  //     setDispMatchArray(structuredClone(matchArray));\n  // }, [matchArray])\n\n  // function test() {\n  //     console.log(dispMatchArray)\n  //     console.log(matchArray)\n  //     setDoDisp(!doDisp)\n  // }\n  // function test2() {\n  //     setDispMatchArray(structuredClone(matchArray));\n  //     dispatch(updateMatches([\n  //         {\n  //             id: 1,\n  //             name: \"Semifinals\",\n  //             nextMatchId: 3,\n  //             tournamentRoundText: \"2\",\n  //             state: \"DONE\",\n  //             participants: [\n  //                 {\n  //                     id: \"1\",\n  //                     isWinner: true,\n  //                     name: \"Theodore\",\n  //                 },\n  //                 {\n  //                     id: \"4\",\n  //                     isWinner: false,\n  //                     name: \"Elvin\"\n  //                 }\n  //             ]\n  //         },\n  //         {\n  //             id: 2,\n  //             name: \"Semifinals\",\n  //             nextMatchId: 3,\n  //             tournamentRoundText: \"2\",\n  //             state: \"DONE\",\n  //             \"participants\": [\n  //                 {\n  //                     id: \"2\",\n  //                     isWinner: true,\n  //                     name: \"Daniel\",\n  //                 },\n  //                 {\n  //                     id: \"3\",\n  //                     isWinner: false,\n  //                     name: \"Andrew\"\n  //                 }\n  //             ]\n  //         },\n  //         {\n  //             id: 3,\n  //             name: \"Finals\",\n  //             nextMatchId: null,\n  //             tournamentRoundText: \"1\",\n  //             state: \"DONE\",\n  //             \"participants\": [\n  //                 {\n  //                     id: \"1\",\n  //                     isWinner: true,\n  //                     name: \"Theodore\",\n  //                 },\n  //                 {\n  //                     id: \"2\",\n  //                     isWinner: false,\n  //                     name: \"TBD\"\n  //                 }\n  //             ]\n  //         }\n  //     ]))\n  // }\n  // function test3() {\n  //     dispatch(updateChampionshipBracketMatches(structuredClone(dispMatchArray)))\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: matchArray.length > 0 && doDisp && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [matchArray.length, /*#__PURE__*/_jsxDEV(SingleEliminationBracket, {\n        matches: matchArray,\n        options: {\n          style: {\n            roundHeader: {\n              backgroundColor: '#AAA'\n            },\n            connectorColor: '#FF8C00',\n            connectorColorHighlight: '#000'\n          }\n        },\n        theme: defaultTheme,\n        svgWrapper: ({\n          children,\n          ...props\n        }) => /*#__PURE__*/_jsxDEV(SVGViewer\n        // background=\"#FFF\"\n        // SVGBackground=\"#FFF\"\n        , {\n          width: finalWidth,\n          height: finalHeight,\n          ...props,\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this),\n        matchComponent: ({\n          match,\n          onMatchClick,\n          onPartyClick,\n          onMouseEnter,\n          onMouseLeave,\n          topParty,\n          bottomParty,\n          topWon,\n          bottomWon,\n          topHovered,\n          bottomHovered,\n          topText,\n          bottomText,\n          connectorColor,\n          computedStyles,\n          teamNameFallback,\n          resultFallback\n        }) => {\n          var _topParty$resultText, _bottomParty$resultTe;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'space-around',\n              color: '#000',\n              width: '100%',\n              height: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              onMouseEnter: () => onMouseEnter(topParty.id),\n              style: {\n                display: 'flex'\n              },\n              onMouseUp: () => {\n                // alert(\"TEST\")\n                let updateMatchBracketObj = {};\n                let num = (matchArray.length + 1) / 2;\n                let matchIdMidValueIncr = num / 4 + num / 2;\n                let num2 = num / 2;\n                let tempCompArr = [num];\n                let tempMidValueArr = [num2];\n                for (let i = num; i > 2; i /= 2) {\n                  if (match.id < num) {\n                    break;\n                  }\n                  num += i / 2;\n                  tempCompArr.push(num);\n                  num2 += matchIdMidValueIncr;\n                  tempMidValueArr.push(num2);\n                  matchIdMidValueIncr /= 2;\n                }\n                // console.log(\"COMP ARR: \" + tempCompArr)\n                // console.log(\"MID ARR: \" + tempMidValueArr)\n                // console.log(\"COMP: \" + num);\n                // console.log(\"MID: \" + num2);\n                // console.log(match);\n                // console.log(matchArray)\n                let temp = structuredClone(matchArray);\n                let cBracket = structuredClone(cMatchArray);\n                console.log(\"TEMP ARR\");\n                console.log(temp);\n                temp[match.id] = {\n                  \"id\": match.id,\n                  \"name\": \"name\",\n                  \"nextMatchId\": match.nextMatchId,\n                  \"state\": \"SCHEDULED\",\n                  \"participants\": [{\n                    \"id\": topParty.id,\n                    \"isWinner\": true,\n                    \"name\": topParty.name\n                  }, {\n                    \"id\": bottomParty.id,\n                    \"isWinner\": false,\n                    \"name\": bottomParty.name\n                  }],\n                  \"tournamentRoundText\": match.tournamentRoundText\n                };\n                updateMatchBracketObj.matchResult = [\"SinglesChampionshipBracket\", true, false, match.id];\n                console.log(\"SDFSDFSDF\");\n                console.log(match.nextMatchId - cBracket[0].id);\n                console.log(cBracket[match.nextMatchId - cBracket[0].id]);\n                cBracket[match.nextMatchId - cBracket[0].id] = {\n                  id: match.nextMatchId,\n                  name: \"name\",\n                  // nextMatchId: midPoint + i,\n                  nextMatchId: temp[match.nextMatchId].nextMatchId,\n                  state: \"SCHEDULED\",\n                  participants: match.id < num2 ? [{\n                    id: bottomParty.id,\n                    isWinner: false,\n                    name: bottomParty.name\n                  }, {\n                    id: cBracket[match.nextMatchId - cBracket[0].id].participants[1].id,\n                    isWinner: false,\n                    name: cBracket[match.nextMatchId - cBracket[0].id].participants[1].name\n                  }] : [{\n                    id: cBracket[match.nextMatchId - cBracket[0].id].participants[0].id,\n                    isWinner: false,\n                    name: cBracket[match.nextMatchId - cBracket[0].id].participants[0].name\n                  }, {\n                    id: bottomParty.id,\n                    isWinner: false,\n                    name: bottomParty.name\n                  }],\n                  tournamentRoundText: temp[match.nextMatchId].tournamentRoundText\n                };\n                temp[match.nextMatchId] = {\n                  id: match.nextMatchId,\n                  name: \"name\",\n                  // nextMatchId: midPoint + i,\n                  nextMatchId: temp[match.nextMatchId].nextMatchId,\n                  state: \"SCHEDULED\",\n                  participants: match.id < num2 ? [{\n                    id: topParty.id,\n                    isWinner: false,\n                    name: topParty.name\n                  }, {\n                    id: temp[match.nextMatchId].participants[1].id,\n                    isWinner: false,\n                    name: temp[match.nextMatchId].participants[1].name\n                  }] : [{\n                    id: temp[match.nextMatchId].participants[0].id,\n                    isWinner: false,\n                    name: temp[match.nextMatchId].participants[0].name\n                  }, {\n                    id: topParty.id,\n                    isWinner: false,\n                    name: topParty.name\n                  }],\n                  tournamentRoundText: temp[match.nextMatchId].tournamentRoundText\n                };\n                setDispMatchArray(temp);\n                dispatch(updateChampionshipBracketMatches(temp));\n                console.log(\"CBRACKET\");\n                console.log(cBracket);\n                dispatch(updateCBracketMatches(cBracket));\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: topParty.name || teamNameFallback\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: (_topParty$resultText = topParty.resultText) !== null && _topParty$resultText !== void 0 ? _topParty$resultText : resultFallback(topParty)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                height: '1px',\n                width: '100%',\n                background: '#FF8C00'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              onMouseEnter: () => onMouseEnter(bottomParty.id),\n              style: {\n                display: 'flex'\n              },\n              onMouseUp: () => {\n                // alert(\"TEST\")\n                let num = (matchArray.length + 1) / 2;\n                let matchIdMidValueIncr = num / 4 + num / 2;\n                let num2 = num / 2;\n                let tempCompArr = [num];\n                let tempMidValueArr = [num2];\n                for (let i = num; i > 2; i /= 2) {\n                  if (match.id < num) {\n                    break;\n                  }\n                  num += i / 2;\n                  tempCompArr.push(num);\n                  num2 += matchIdMidValueIncr;\n                  tempMidValueArr.push(num2);\n                  matchIdMidValueIncr /= 2;\n                }\n                let temp = structuredClone(matchArray);\n                console.log(\"TEMP ARR\");\n                console.log(temp);\n                temp[match.id] = {\n                  \"id\": match.id,\n                  \"name\": \"name\",\n                  \"nextMatchId\": match.nextMatchId,\n                  \"state\": \"SCHEDULED\",\n                  \"participants\": [{\n                    \"id\": topParty.id,\n                    \"isWinner\": false,\n                    \"name\": topParty.name\n                  }, {\n                    \"id\": bottomParty.id,\n                    \"isWinner\": true,\n                    \"name\": bottomParty.name\n                  }],\n                  \"tournamentRoundText\": match.tournamentRoundText\n                };\n                temp[match.nextMatchId] = {\n                  id: match.nextMatchId,\n                  name: \"name\",\n                  // nextMatchId: midPoint + i,\n                  nextMatchId: temp[match.nextMatchId].nextMatchId,\n                  state: \"SCHEDULED\",\n                  participants: match.id < num2 ? [{\n                    id: bottomParty.id,\n                    isWinner: false,\n                    name: bottomParty.name\n                  }, {\n                    id: temp[match.nextMatchId].participants[1].id,\n                    isWinner: false,\n                    name: temp[match.nextMatchId].participants[1].name\n                  }] : [{\n                    id: temp[match.nextMatchId].participants[0].id,\n                    isWinner: false,\n                    name: temp[match.nextMatchId].participants[0].name\n                  }, {\n                    id: bottomParty.id,\n                    isWinner: false,\n                    name: bottomParty.name\n                  }],\n                  tournamentRoundText: temp[match.nextMatchId].tournamentRoundText\n                };\n                setDispMatchArray(temp);\n                dispatch(updateChampionshipBracketMatches(temp));\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: bottomParty.name || teamNameFallback\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: (_bottomParty$resultTe = bottomParty.resultText) !== null && _bottomParty$resultTe !== void 0 ? _bottomParty$resultTe : resultFallback(topParty)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 73\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n_s(SinglesBracket, \"AcJMOxIMVMzb6tlOo+eAnaSjLHU=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = SinglesBracket;\nexport default SinglesBracket;\nvar _c;\n$RefreshReg$(_c, \"SinglesBracket\");","map":{"version":3,"names":["React","useRef","useState","Component","useEffect","SingleEliminationBracket","DoubleEliminationBracket","Match","MATCH_STATES","SVGViewer","defaultTheme","useSelector","useDispatch","updateCBracketMatches","updateChampionshipBracketMatches","jsxDEV","_jsxDEV","Fragment","_Fragment","SinglesBracket","_s","dispatch","matchArray","structuredClone","state","singles","championshipBracketMatches","cMatchArray","cBracketMatches","windowSize","window","innerWidth","innerHeight","finalWidth","Math","max","current","finalHeight","dispMatchArray","setDispMatchArray","doDisp","setDoDisp","children","length","matches","options","style","roundHeader","backgroundColor","connectorColor","connectorColorHighlight","theme","svgWrapper","props","width","height","fileName","_jsxFileName","lineNumber","columnNumber","matchComponent","match","onMatchClick","onPartyClick","onMouseEnter","onMouseLeave","topParty","bottomParty","topWon","bottomWon","topHovered","bottomHovered","topText","bottomText","computedStyles","teamNameFallback","resultFallback","_topParty$resultText","_bottomParty$resultTe","display","flexDirection","justifyContent","color","id","onMouseUp","updateMatchBracketObj","num","matchIdMidValueIncr","num2","tempCompArr","tempMidValueArr","i","push","temp","cBracket","console","log","nextMatchId","name","tournamentRoundText","matchResult","participants","isWinner","resultText","background","_c","$RefreshReg$"],"sources":["C:/Users/theod/WebstormProjects/IowaOpenProgKnockout/frontend/src/Views/Components/SinglesBracket.jsx"],"sourcesContent":["import React, {useRef, useState, Component, useEffect} from \"react\";\r\nimport {\r\n    SingleEliminationBracket,\r\n    DoubleEliminationBracket,\r\n    Match,\r\n    MATCH_STATES,\r\n    SVGViewer\r\n} from '@g-loot/react-tournament-brackets';\r\nimport defaultTheme from \"../Themes/defaultTheme\";\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {updateCBracketMatches, updateChampionshipBracketMatches} from \"../../features/singles/singlesSlice\";\r\n\r\nfunction SinglesBracket({}) {\r\n    const dispatch = useDispatch()\r\n    const matchArray = structuredClone(useSelector((state) => state.singles.championshipBracketMatches));\r\n    const cMatchArray = structuredClone(useSelector((state) => state.singles.cBracketMatches));\r\n\r\n    // const [width, height] = [1920, 1080];\r\n    // const finalWidth = Math.max(width - 50, 500);\r\n    // const finalHeight = Math.max(height - 100, 500);\r\n    const windowSize = useRef([window.innerWidth, window.innerHeight]);\r\n    const finalWidth = Math.max(windowSize.current[0] - 50, 500);\r\n    // const finalHeight = Math.max(windowSize.current[1] - 100, 500);\r\n    const finalHeight = 100000000;\r\n\r\n    const [dispMatchArray, setDispMatchArray] = useState(matchArray);\r\n    const [doDisp, setDoDisp] = useState(true);\r\n    // useEffect(() => {\r\n    //     // console.log(\"HELLO THERE\")\r\n    //     setDispMatchArray(structuredClone(matchArray));\r\n    // }, [matchArray])\r\n\r\n    // function test() {\r\n    //     console.log(dispMatchArray)\r\n    //     console.log(matchArray)\r\n    //     setDoDisp(!doDisp)\r\n    // }\r\n    // function test2() {\r\n    //     setDispMatchArray(structuredClone(matchArray));\r\n    //     dispatch(updateMatches([\r\n    //         {\r\n    //             id: 1,\r\n    //             name: \"Semifinals\",\r\n    //             nextMatchId: 3,\r\n    //             tournamentRoundText: \"2\",\r\n    //             state: \"DONE\",\r\n    //             participants: [\r\n    //                 {\r\n    //                     id: \"1\",\r\n    //                     isWinner: true,\r\n    //                     name: \"Theodore\",\r\n    //                 },\r\n    //                 {\r\n    //                     id: \"4\",\r\n    //                     isWinner: false,\r\n    //                     name: \"Elvin\"\r\n    //                 }\r\n    //             ]\r\n    //         },\r\n    //         {\r\n    //             id: 2,\r\n    //             name: \"Semifinals\",\r\n    //             nextMatchId: 3,\r\n    //             tournamentRoundText: \"2\",\r\n    //             state: \"DONE\",\r\n    //             \"participants\": [\r\n    //                 {\r\n    //                     id: \"2\",\r\n    //                     isWinner: true,\r\n    //                     name: \"Daniel\",\r\n    //                 },\r\n    //                 {\r\n    //                     id: \"3\",\r\n    //                     isWinner: false,\r\n    //                     name: \"Andrew\"\r\n    //                 }\r\n    //             ]\r\n    //         },\r\n    //         {\r\n    //             id: 3,\r\n    //             name: \"Finals\",\r\n    //             nextMatchId: null,\r\n    //             tournamentRoundText: \"1\",\r\n    //             state: \"DONE\",\r\n    //             \"participants\": [\r\n    //                 {\r\n    //                     id: \"1\",\r\n    //                     isWinner: true,\r\n    //                     name: \"Theodore\",\r\n    //                 },\r\n    //                 {\r\n    //                     id: \"2\",\r\n    //                     isWinner: false,\r\n    //                     name: \"TBD\"\r\n    //                 }\r\n    //             ]\r\n    //         }\r\n    //     ]))\r\n    // }\r\n    // function test3() {\r\n    //     dispatch(updateChampionshipBracketMatches(structuredClone(dispMatchArray)))\r\n    // }\r\n    return (\r\n        <div>\r\n            {/*<button type=\"button\" onClick={test}>TESFDFKJL</button>*/}\r\n            {/*<button type=\"button\" onClick={test2}>TESFDFKJL</button>*/}\r\n            {/*<button type=\"button\" onClick={test3}>TESFDFKJL</button>*/}\r\n            {(matchArray.length > 0 && doDisp) && (<>{matchArray.length}<SingleEliminationBracket\r\n                matches={matchArray}\r\n                options={{\r\n                    style: {\r\n                        roundHeader: {backgroundColor: '#AAA'},\r\n                        connectorColor: '#FF8C00',\r\n                        connectorColorHighlight: '#000',\r\n                    },\r\n                }}\r\n                theme={defaultTheme}\r\n                svgWrapper={({children, ...props}) => (\r\n                    <SVGViewer\r\n                        // background=\"#FFF\"\r\n                        // SVGBackground=\"#FFF\"\r\n                        width={finalWidth}\r\n                        height={finalHeight}\r\n                        {...props}\r\n                    >\r\n                        {children}\r\n                    </SVGViewer>\r\n                )}\r\n                matchComponent={({\r\n                                     match,\r\n                                     onMatchClick,\r\n                                     onPartyClick,\r\n                                     onMouseEnter,\r\n                                     onMouseLeave,\r\n                                     topParty,\r\n                                     bottomParty,\r\n                                     topWon,\r\n                                     bottomWon,\r\n                                     topHovered,\r\n                                     bottomHovered,\r\n                                     topText,\r\n                                     bottomText,\r\n                                     connectorColor,\r\n                                     computedStyles,\r\n                                     teamNameFallback,\r\n                                     resultFallback,\r\n                                 }) => (\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'column',\r\n                            justifyContent: 'space-around',\r\n                            color: '#000',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                        }}\r\n\r\n                    >\r\n                        <div\r\n                            onMouseEnter={() => onMouseEnter(topParty.id)}\r\n                            style={{display: 'flex'}}\r\n                            onMouseUp={() => {\r\n                                // alert(\"TEST\")\r\n                                let updateMatchBracketObj = {};\r\n                                let num = ((matchArray.length) + 1) / 2;\r\n\r\n                                let matchIdMidValueIncr = num/4 + num/2;\r\n                                let num2 = num / 2\r\n                                let tempCompArr = [num]\r\n                                let tempMidValueArr = [num2]\r\n                                for (let i = num; i > 2; i /= 2) {\r\n                                    if (match.id < num) {\r\n                                        break;\r\n                                    }\r\n                                    num += (i/2);\r\n                                    tempCompArr.push(num);\r\n                                    num2 += matchIdMidValueIncr\r\n                                    tempMidValueArr.push(num2)\r\n                                    matchIdMidValueIncr /= 2;\r\n\r\n                                }\r\n                                // console.log(\"COMP ARR: \" + tempCompArr)\r\n                                // console.log(\"MID ARR: \" + tempMidValueArr)\r\n                                // console.log(\"COMP: \" + num);\r\n                                // console.log(\"MID: \" + num2);\r\n                                // console.log(match);\r\n                                // console.log(matchArray)\r\n                                let temp = structuredClone(matchArray)\r\n                                let cBracket = structuredClone(cMatchArray)\r\n                                console.log(\"TEMP ARR\")\r\n                                console.log(temp)\r\n                                temp[match.id] = {\r\n                                    \"id\": match.id,\r\n                                    \"name\": \"name\",\r\n                                    \"nextMatchId\": match.nextMatchId,\r\n                                    \"state\": \"SCHEDULED\",\r\n                                    \"participants\": [\r\n                                        {\r\n                                            \"id\": topParty.id,\r\n                                            \"isWinner\": true,\r\n                                            \"name\": topParty.name\r\n                                        },\r\n                                        {\r\n                                            \"id\": bottomParty.id,\r\n                                            \"isWinner\": false,\r\n                                            \"name\": bottomParty.name\r\n                                        }\r\n                                    ],\r\n                                    \"tournamentRoundText\": match.tournamentRoundText\r\n                                }\r\n                                updateMatchBracketObj.matchResult = [\"SinglesChampionshipBracket\", true, false, match.id]\r\n                                console.log(\"SDFSDFSDF\")\r\n                                console.log(match.nextMatchId - cBracket[0].id)\r\n                                console.log(cBracket[match.nextMatchId - cBracket[0].id])\r\n                                cBracket[match.nextMatchId - cBracket[0].id] = {\r\n                                    id: match.nextMatchId,\r\n                                    name: \"name\",\r\n                                    // nextMatchId: midPoint + i,\r\n                                    nextMatchId: temp[match.nextMatchId].nextMatchId,\r\n                                    state: \"SCHEDULED\",\r\n                                    participants: (match.id < num2 ? [\r\n                                        {\r\n                                            id: bottomParty.id,\r\n                                            isWinner: false,\r\n                                            name: bottomParty.name,\r\n                                        },\r\n                                        {\r\n                                            id: cBracket[match.nextMatchId - cBracket[0].id].participants[1].id,\r\n                                            isWinner: false,\r\n                                            name: cBracket[match.nextMatchId - cBracket[0].id].participants[1].name,\r\n                                        }\r\n\r\n\r\n                                    ] : [\r\n                                        {\r\n                                            id: cBracket[match.nextMatchId - cBracket[0].id].participants[0].id,\r\n                                            isWinner: false,\r\n                                            name: cBracket[match.nextMatchId - cBracket[0].id].participants[0].name,\r\n                                        },\r\n                                        {\r\n                                            id: bottomParty.id,\r\n                                            isWinner: false,\r\n                                            name: bottomParty.name,\r\n                                        }\r\n                                    ]),\r\n                                    tournamentRoundText: temp[match.nextMatchId].tournamentRoundText\r\n                                }\r\n\r\n                                temp[match.nextMatchId] = {\r\n                                    id: match.nextMatchId,\r\n                                    name: \"name\",\r\n                                    // nextMatchId: midPoint + i,\r\n                                    nextMatchId: temp[match.nextMatchId].nextMatchId,\r\n                                    state: \"SCHEDULED\",\r\n                                    participants: (match.id < num2 ? [\r\n                                        {\r\n                                            id: topParty.id,\r\n                                            isWinner: false,\r\n                                            name: topParty.name,\r\n                                        },\r\n                                        {\r\n                                            id: temp[match.nextMatchId].participants[1].id,\r\n                                            isWinner: false,\r\n                                            name: temp[match.nextMatchId].participants[1].name,\r\n                                        }\r\n                                    ] : [\r\n                                        {\r\n                                            id: temp[match.nextMatchId].participants[0].id,\r\n                                            isWinner: false,\r\n                                            name: temp[match.nextMatchId].participants[0].name,\r\n                                        },\r\n                                        {\r\n                                            id: topParty.id,\r\n                                            isWinner: false,\r\n                                            name: topParty.name,\r\n                                        }\r\n                                    ]),\r\n                                    tournamentRoundText: temp[match.nextMatchId].tournamentRoundText\r\n                                }\r\n\r\n                                setDispMatchArray(temp);\r\n                                dispatch(updateChampionshipBracketMatches(temp))\r\n                                console.log(\"CBRACKET\")\r\n                                console.log(cBracket)\r\n                                dispatch(updateCBracketMatches(cBracket))\r\n                            }}\r\n                        >\r\n                            <div>{topParty.name || teamNameFallback}</div>\r\n                            <div>{topParty.resultText ?? resultFallback(topParty)}</div>\r\n                        </div>\r\n                        <div\r\n                            style={{height: '1px', width: '100%', background: '#FF8C00'}}\r\n                        />\r\n                        <div\r\n                            onMouseEnter={() => onMouseEnter(bottomParty.id)}\r\n                            style={{display: 'flex'}}\r\n                            onMouseUp={() => {\r\n\r\n                                // alert(\"TEST\")\r\n                                let num = ((matchArray.length) + 1) / 2;\r\n\r\n                                let matchIdMidValueIncr = num/4 + num/2;\r\n                                let num2 = num / 2\r\n                                let tempCompArr = [num]\r\n                                let tempMidValueArr = [num2]\r\n                                for (let i = num; i > 2; i /= 2) {\r\n                                    if (match.id < num) {\r\n                                        break;\r\n                                    }\r\n                                    num += (i/2);\r\n                                    tempCompArr.push(num);\r\n                                    num2 += matchIdMidValueIncr\r\n                                    tempMidValueArr.push(num2)\r\n                                    matchIdMidValueIncr /= 2;\r\n\r\n                                }\r\n                                let temp = structuredClone(matchArray)\r\n                                console.log(\"TEMP ARR\")\r\n                                console.log(temp)\r\n                                temp[match.id] = {\r\n                                    \"id\": match.id,\r\n                                    \"name\": \"name\",\r\n                                    \"nextMatchId\": match.nextMatchId,\r\n                                    \"state\": \"SCHEDULED\",\r\n                                    \"participants\": [\r\n                                        {\r\n                                            \"id\": topParty.id,\r\n                                            \"isWinner\": false,\r\n                                            \"name\": topParty.name\r\n                                        },\r\n                                        {\r\n                                            \"id\": bottomParty.id,\r\n                                            \"isWinner\": true,\r\n                                            \"name\": bottomParty.name\r\n                                        }\r\n                                    ],\r\n                                    \"tournamentRoundText\": match.tournamentRoundText\r\n                                }\r\n                                temp[match.nextMatchId] = {\r\n                                    id: match.nextMatchId,\r\n                                    name: \"name\",\r\n                                    // nextMatchId: midPoint + i,\r\n                                    nextMatchId: temp[match.nextMatchId].nextMatchId,\r\n                                    state: \"SCHEDULED\",\r\n                                    participants: (match.id < num2 ? [\r\n                                        {\r\n                                            id: bottomParty.id,\r\n                                            isWinner: false,\r\n                                            name: bottomParty.name,\r\n                                        },\r\n                                        {\r\n                                            id: temp[match.nextMatchId].participants[1].id,\r\n                                            isWinner: false,\r\n                                            name: temp[match.nextMatchId].participants[1].name,\r\n                                        }\r\n                                    ] : [\r\n                                        {\r\n                                            id: temp[match.nextMatchId].participants[0].id,\r\n                                            isWinner: false,\r\n                                            name: temp[match.nextMatchId].participants[0].name,\r\n                                        },\r\n                                        {\r\n                                            id: bottomParty.id,\r\n                                            isWinner: false,\r\n                                            name: bottomParty.name,\r\n                                        }\r\n                                    ]),\r\n                                    tournamentRoundText: temp[match.nextMatchId].tournamentRoundText\r\n                                }\r\n                                setDispMatchArray(temp);\r\n                                dispatch(updateChampionshipBracketMatches(temp))\r\n                            }}\r\n                        >\r\n                            <div>{bottomParty.name || teamNameFallback}</div>\r\n                            <div>{bottomParty.resultText ?? resultFallback(topParty)}</div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            /></>)}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SinglesBracket;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}